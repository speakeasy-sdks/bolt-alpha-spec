// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/bolt-alpha-spec/pkg/utils"
	"net/http"
	"time"
)

// TestingShipmentTrackingCreateRequestBodyStatus - The shipment's status.
type TestingShipmentTrackingCreateRequestBodyStatus string

const (
	TestingShipmentTrackingCreateRequestBodyStatusInTransit TestingShipmentTrackingCreateRequestBodyStatus = "in_transit"
	TestingShipmentTrackingCreateRequestBodyStatusCancelled TestingShipmentTrackingCreateRequestBodyStatus = "cancelled"
	TestingShipmentTrackingCreateRequestBodyStatusFailure   TestingShipmentTrackingCreateRequestBodyStatus = "failure"
	TestingShipmentTrackingCreateRequestBodyStatusDelivered TestingShipmentTrackingCreateRequestBodyStatus = "delivered"
)

func (e TestingShipmentTrackingCreateRequestBodyStatus) ToPointer() *TestingShipmentTrackingCreateRequestBodyStatus {
	return &e
}

func (e *TestingShipmentTrackingCreateRequestBodyStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in_transit":
		fallthrough
	case "cancelled":
		fallthrough
	case "failure":
		fallthrough
	case "delivered":
		*e = TestingShipmentTrackingCreateRequestBodyStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TestingShipmentTrackingCreateRequestBodyStatus: %v", v)
	}
}

type TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus string

const (
	TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatusUnknown            TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus = "unknown"
	TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatusPreTransit         TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus = "pre_transit"
	TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatusInTransit          TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus = "in_transit"
	TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatusOutForDelivery     TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus = "out_for_delivery"
	TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatusDelivered          TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus = "delivered"
	TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatusAvailableForPickup TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus = "available_for_pickup"
	TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatusReturnToSender     TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus = "return_to_sender"
	TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatusFailure            TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus = "failure"
	TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatusCancelled          TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus = "cancelled"
	TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatusError              TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus = "error"
)

func (e TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus) ToPointer() *TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus {
	return &e
}

func (e *TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "pre_transit":
		fallthrough
	case "in_transit":
		fallthrough
	case "out_for_delivery":
		fallthrough
	case "delivered":
		fallthrough
	case "available_for_pickup":
		fallthrough
	case "return_to_sender":
		fallthrough
	case "failure":
		fallthrough
	case "cancelled":
		fallthrough
	case "error":
		*e = TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus: %v", v)
	}
}

type TestingShipmentTrackingCreateRequestBodyTrackingDetails struct {
	// The country associated this this set of tracking details, if any.
	CountryCode *string `json:"country_code,omitempty"`
	// The tracking detail's timestamp.
	EventDate *string `json:"event_date,omitempty"`
	// The locality associated this this set of tracking details, if any.
	Locality *string `json:"locality,omitempty"`
	// An arbitrary, human-readable message associated with this set of tracking details.
	Message *string `json:"message,omitempty"`
	// The postal associated this this set of tracking details, if any.
	PostalCode *string `json:"postal_code,omitempty"`
	// The region associated this this set of tracking details, if any.
	Region *string                                                        `json:"region,omitempty"`
	Status *TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus `json:"status,omitempty"`
}

func (o *TestingShipmentTrackingCreateRequestBodyTrackingDetails) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *TestingShipmentTrackingCreateRequestBodyTrackingDetails) GetEventDate() *string {
	if o == nil {
		return nil
	}
	return o.EventDate
}

func (o *TestingShipmentTrackingCreateRequestBodyTrackingDetails) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *TestingShipmentTrackingCreateRequestBodyTrackingDetails) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *TestingShipmentTrackingCreateRequestBodyTrackingDetails) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *TestingShipmentTrackingCreateRequestBodyTrackingDetails) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *TestingShipmentTrackingCreateRequestBodyTrackingDetails) GetStatus() *TestingShipmentTrackingCreateRequestBodyTrackingDetailsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type TestingShipmentTrackingCreateRequestBody struct {
	// The shipment's actual or estimated delivery date.
	DeliveryDate *time.Time `json:"delivery_date,omitempty"`
	// The shipment's status.
	Status TestingShipmentTrackingCreateRequestBodyStatus `json:"status"`
	// A list of tracking updates that contain the shipment's status, location, and any unique messages.
	TrackingDetails []TestingShipmentTrackingCreateRequestBodyTrackingDetails `json:"tracking_details"`
	// The carrier's tracking number for the shipment. Must be prefixed with `MockBolt`.
	TrackingNumber string `json:"tracking_number"`
}

func (t TestingShipmentTrackingCreateRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TestingShipmentTrackingCreateRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TestingShipmentTrackingCreateRequestBody) GetDeliveryDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeliveryDate
}

func (o *TestingShipmentTrackingCreateRequestBody) GetStatus() TestingShipmentTrackingCreateRequestBodyStatus {
	if o == nil {
		return TestingShipmentTrackingCreateRequestBodyStatus("")
	}
	return o.Status
}

func (o *TestingShipmentTrackingCreateRequestBody) GetTrackingDetails() []TestingShipmentTrackingCreateRequestBodyTrackingDetails {
	if o == nil {
		return []TestingShipmentTrackingCreateRequestBodyTrackingDetails{}
	}
	return o.TrackingDetails
}

func (o *TestingShipmentTrackingCreateRequestBody) GetTrackingNumber() string {
	if o == nil {
		return ""
	}
	return o.TrackingNumber
}

type TestingShipmentTrackingCreateResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *TestingShipmentTrackingCreateResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *TestingShipmentTrackingCreateResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *TestingShipmentTrackingCreateResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
