// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/bolt-alpha-spec/pkg/utils"
)

type PaymentResponsePaymentResponsePendingAction string

const (
	PaymentResponsePaymentResponsePendingActionRedirect PaymentResponsePaymentResponsePendingAction = "redirect"
	PaymentResponsePaymentResponsePendingActionFinalize PaymentResponsePaymentResponsePendingAction = "finalize"
)

func (e PaymentResponsePaymentResponsePendingAction) ToPointer() *PaymentResponsePaymentResponsePendingAction {
	return &e
}

func (e *PaymentResponsePaymentResponsePendingAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redirect":
		fallthrough
	case "finalize":
		*e = PaymentResponsePaymentResponsePendingAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentResponsePaymentResponsePendingAction: %v", v)
	}
}

type PaymentResponsePaymentResponsePendingMethod string

const (
	PaymentResponsePaymentResponsePendingMethodGet  PaymentResponsePaymentResponsePendingMethod = "GET"
	PaymentResponsePaymentResponsePendingMethodPost PaymentResponsePaymentResponsePendingMethod = "POST"
)

func (e PaymentResponsePaymentResponsePendingMethod) ToPointer() *PaymentResponsePaymentResponsePendingMethod {
	return &e
}

func (e *PaymentResponsePaymentResponsePendingMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "POST":
		*e = PaymentResponsePaymentResponsePendingMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentResponsePaymentResponsePendingMethod: %v", v)
	}
}

type PaymentResponsePaymentResponsePendingStatus string

const (
	PaymentResponsePaymentResponsePendingStatusAwaitingUserConfirmation PaymentResponsePaymentResponsePendingStatus = "awaiting_user_confirmation"
	PaymentResponsePaymentResponsePendingStatusPaymentReady             PaymentResponsePaymentResponsePendingStatus = "payment_ready"
	PaymentResponsePaymentResponsePendingStatusUpdatePaymentMethod      PaymentResponsePaymentResponsePendingStatus = "update_payment_method"
)

func (e PaymentResponsePaymentResponsePendingStatus) ToPointer() *PaymentResponsePaymentResponsePendingStatus {
	return &e
}

func (e *PaymentResponsePaymentResponsePendingStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "awaiting_user_confirmation":
		fallthrough
	case "payment_ready":
		fallthrough
	case "update_payment_method":
		*e = PaymentResponsePaymentResponsePendingStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentResponsePaymentResponsePendingStatus: %v", v)
	}
}

type PaymentResponsePaymentResponsePending struct {
	Action *PaymentResponsePaymentResponsePendingAction `json:"action,omitempty"`
	ID     *string                                      `json:"id,omitempty"`
	Method *PaymentResponsePaymentResponsePendingMethod `json:"method,omitempty"`
	Status *PaymentResponsePaymentResponsePendingStatus `json:"status,omitempty"`
	URL    *string                                      `json:"url,omitempty"`
}

func (o *PaymentResponsePaymentResponsePending) GetAction() *PaymentResponsePaymentResponsePendingAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *PaymentResponsePaymentResponsePending) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PaymentResponsePaymentResponsePending) GetMethod() *PaymentResponsePaymentResponsePendingMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PaymentResponsePaymentResponsePending) GetStatus() *PaymentResponsePaymentResponsePendingStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PaymentResponsePaymentResponsePending) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type PaymentResponsePaymentResponseFinalizedStatus string

const (
	PaymentResponsePaymentResponseFinalizedStatusSuccess PaymentResponsePaymentResponseFinalizedStatus = "success"
)

func (e PaymentResponsePaymentResponseFinalizedStatus) ToPointer() *PaymentResponsePaymentResponseFinalizedStatus {
	return &e
}

func (e *PaymentResponsePaymentResponseFinalizedStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		*e = PaymentResponsePaymentResponseFinalizedStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentResponsePaymentResponseFinalizedStatus: %v", v)
	}
}

type PaymentResponsePaymentResponseFinalized struct {
	ID          *string                                        `json:"id,omitempty"`
	Status      *PaymentResponsePaymentResponseFinalizedStatus `json:"status,omitempty"`
	Transaction *Transaction                                   `json:"transaction,omitempty"`
}

func (o *PaymentResponsePaymentResponseFinalized) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PaymentResponsePaymentResponseFinalized) GetStatus() *PaymentResponsePaymentResponseFinalizedStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PaymentResponsePaymentResponseFinalized) GetTransaction() *Transaction {
	if o == nil {
		return nil
	}
	return o.Transaction
}

type PaymentResponseType string

const (
	PaymentResponseTypePaymentResponsePaymentResponseFinalized PaymentResponseType = "payment-response_payment-response-finalized"
	PaymentResponseTypePaymentResponsePaymentResponsePending   PaymentResponseType = "payment-response_payment-response-pending"
)

type PaymentResponse struct {
	PaymentResponsePaymentResponseFinalized *PaymentResponsePaymentResponseFinalized
	PaymentResponsePaymentResponsePending   *PaymentResponsePaymentResponsePending

	Type PaymentResponseType
}

func CreatePaymentResponsePaymentResponsePaymentResponseFinalized(paymentResponsePaymentResponseFinalized PaymentResponsePaymentResponseFinalized) PaymentResponse {
	typ := PaymentResponseTypePaymentResponsePaymentResponseFinalized

	return PaymentResponse{
		PaymentResponsePaymentResponseFinalized: &paymentResponsePaymentResponseFinalized,
		Type:                                    typ,
	}
}

func CreatePaymentResponsePaymentResponsePaymentResponsePending(paymentResponsePaymentResponsePending PaymentResponsePaymentResponsePending) PaymentResponse {
	typ := PaymentResponseTypePaymentResponsePaymentResponsePending

	return PaymentResponse{
		PaymentResponsePaymentResponsePending: &paymentResponsePaymentResponsePending,
		Type:                                  typ,
	}
}

func (u *PaymentResponse) UnmarshalJSON(data []byte) error {

	paymentResponsePaymentResponseFinalized := new(PaymentResponsePaymentResponseFinalized)
	if err := utils.UnmarshalJSON(data, &paymentResponsePaymentResponseFinalized, "", true, true); err == nil {
		u.PaymentResponsePaymentResponseFinalized = paymentResponsePaymentResponseFinalized
		u.Type = PaymentResponseTypePaymentResponsePaymentResponseFinalized
		return nil
	}

	paymentResponsePaymentResponsePending := new(PaymentResponsePaymentResponsePending)
	if err := utils.UnmarshalJSON(data, &paymentResponsePaymentResponsePending, "", true, true); err == nil {
		u.PaymentResponsePaymentResponsePending = paymentResponsePaymentResponsePending
		u.Type = PaymentResponseTypePaymentResponsePaymentResponsePending
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PaymentResponse) MarshalJSON() ([]byte, error) {
	if u.PaymentResponsePaymentResponseFinalized != nil {
		return utils.MarshalJSON(u.PaymentResponsePaymentResponseFinalized, "", true)
	}

	if u.PaymentResponsePaymentResponsePending != nil {
		return utils.MarshalJSON(u.PaymentResponsePaymentResponsePending, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
